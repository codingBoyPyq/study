外观模式：
定义;
为子系统中的一组接口提供一个一致的界面，facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用
                         client
                           \/
                         facade
   子系统        /           |           \
            模块A          模块B          模块C

相当于是底层功能的组合，提供给上层

facade ；定义子系统的多个模块对外的高层接口，通常需要调用内部多个模块，从而把客户的请求代理给适当的子系统对象
模块：接受facade对象的委派，真正实现功能，各模块之间可能有交互。注意：facade知道各个模块，但各个模块不应该知道facade对象

外观模式的目的：
不是给子系统添加新的功能接口，而是让外部减少与子系统内多个模块的交互，松散耦合，从而让外部更简单的使用子系统

facade使用与不使用
方便了客户端的调用，封装了系统内部的细节功能，实现功能的共享和复用
3，有外观，但是可以不使用
4 外观提供了缺省的功能实现


facade 可以实现成为一个接口
好处
能够有选择性的暴漏子系统内部的接口方法。尽量减少模块对子系统外提供接口方法。

Facade的方法实现
 一般是负责吧客户端的请求转发给子系统内部的各个模块进行差不离，facade的方法本身并不进行功能的处理，facade的方法的实现只是实现一个功能的组合调用。
优缺点：
1；松散耦合
2，简单易用
3，更好的划分访问层次
4；过多的或者不太合理的Facade也容易让人迷惑


外观模式的本质
封装交互，简化调用


对设计原则的体现
体现了“最少知识原则”

何时才使用外观模式
1如果你希望为一个复杂的子系统提供一个简单的接口时候，可以考虑使用外观模式，是用外观对象来实践大部分客户需要的功能，从而简化客户的使用
2如果想要让客户端程序和抽象类的实现不跟松散耦合，可以考虑使用外观模式，使用外观对象来将这个子系统与他的客户分离开来，从而提高子系统的独立性和可移植性

