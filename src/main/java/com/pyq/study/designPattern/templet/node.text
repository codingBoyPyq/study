模板模式：
什么时候用： 拉粑粑 这个事
第一步： 肯定先脱裤子吧；    第二步：肯定是拉粑粑了；  第三步：那就是擦屁屁了；第四步：那就是提裤子了；第五步：那就是洗手了；
分析：这5个步骤，每个人拉粑粑都得去做，如果创建5个实体类，对五个步骤都做实现一遍，那代码的重用性就不行了；
可以看出，1，2，4，5 大家都是一样的，具体第三步那就仁者见仁了，有人用纸，有人用湿巾，竟然有人还用手指。
所以我们可以定义一个抽象的拉粑粑类，把一样的动作在抽象类里实现，把不一样的动作在抽象类里抽象。同时定义一个模板方法。

public abstract class 拉屎{
    void 脱裤子（）{
        脱下裤子。
    }
    void 拉粑粑（）{
          拉丝中！
    }
    //由于每个人不一样，这里不具体实现。
    void 擦屁屁（）;


    void 提裤子（）{
        提上裤子。
     }

    void 洗手（）{
        去洗手。
    }
    void 拉屎行为（）{
    脱裤子（）；
    拉粑粑（）；
    擦屁屁（）；
    提裤子（）；
    洗手（）；
    }
}


public class A人拉屎 extends 拉屎 {

    @Override
    public void 擦屁屁(){
     用手指扣；
    }
}

public class B人拉屎 extends 拉屎 {

    @Override
    public void 擦屁屁(){
     用湿巾擦；
    }
}

public class 测试模板方法（）{
    public static void main (String[] args)
    {
        拉屎  A = new  A人拉屎();
        A.拉屎行为（）；
        拉屎  B = new  B人拉屎();
        B.拉屎行为（）；
    }
}



就是指：一个抽象类中，有一个主方法，
再定义1...n个方法，可以是抽象的，也可以是实际的方法。
定义一个类，继承该抽象类，重写抽象方法，通过调用抽象类，实现对子类主方法的调用。
